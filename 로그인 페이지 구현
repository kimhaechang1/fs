로그인에 필요한 요소로는

이메일, 비밀번호, 확인 이 있다.


*CSS VH와 VW

VH = ViewPort Height 
VW = ViewPort Width

현재 실행중인 스크린 크기에 맞춰 상대적 크기를 반환

100vh, 100vw 가 전체화면의 기준

ex) 현재 스크린 크기가 height=1000px, width = 800px이라면

1vh = 10px / 1vw = 8px

% 와의 차이

width에도 wh를 쓸수있고 그 반대도 가능하다.

또한 vh와 vw는 열려있는 화면 전체의 상대길이 이므로 스크롤바를 포함한 길이를 반환하며

%는 창이 중심이 아닌 %를 쓰고있는 요소의 부모 요소의 길이에 맞게 반환한다.

먼저 Login 컴포넌트 로직이 있는 LoginPage.js를 펼친다.

function LoginPage(props){
    render(){
        return(
            <div>
                LoginPage
            </div>
        )
    }
}

라고 되어있는데

여기서 우선 우리가 필요한 요소로는 이메일, 비밀번호, 확인 이 있다

이메일과 비밀번호 그리고 확인 모두는 form 요소로 정의 되고

이메일은 이메일 라벨과 함께 input type="email"로 정의하고

비밀번호는 비밀번호 라벨과 함께 input type="password",

확인은 button 태그를 사용한다

이때 저번에 다운받은 리액트 컴포넌트 css 프레임워크인 antd를 사용하기 위해서

import {Input, Button, Form} from 'antd' 를 선언한다.

그리고 다음과 같이 작성한다

return (
        <div style={{
            display:'flex', justifyContent:'center',alignItems:'center'
            , width:'100%',height:'100vh'}}>
            <form style={{display:'flex', flexDirection:'column'}}
                onSubmit={onSubmitHandler}
            >
                <label>Email</label>
                <input type="email" value={Email} onChange={onEmailHandler}/>
                <label>Password</label>
                <input type="password" value={Password} onChange={onPasswordHandler}/>
                <br/>
                <button>
                    Login
                </button>
            </form>
        </div>
    )

여기서 중요한 점은 아직 페이지를 랜딩 하여 Input값에 무슨 값을 집어넣으려고 해도

들어가지 않는다는 점이다.

왜냐하면 Input 태그의 속성값 value의 값이 변경되도록 설정하지 않았기 때문이다

이걸 동적으로 입력값에따라 변환시키기 위해서는 react Hook인 useState를 사용한다

그렇기 위해선 초기 state 값을 설정해야한다.

필요한 요소로는 email, password 이며 이들은 초기값으로 공백문자열을 가진다.

const [Email,setEmail] = useState("")
const [Password, setPassword] = useState("")


const onEmailHandler = (e) => {
    setEmail(e.target.value)
}

const onPasswordHandler = (e) =>{
    setPassword(e.target.value)
}

그리고 onChange이벤트의 핸들러로서 각각 onEmailHandler와 onPasswordHandler 함수를 가지며

이는 Event객체를 통해 Event가 발생한 곳의 변화한 value값을 들고와서 state를 변경해준다.

마지막으로 submit은 form요소에서 button을 누를 시 submit이 form 내부의 값을 가져와야 하므로

<form style={{display:'flex', flexDirection:'column'}}
                onSubmit={onSubmitHandler}
            >

또한 해당하는 onSubmit 이벤트에 대한 핸들러를 onSubmitHandler함수로 설정해주고

이 함수를 정의한다.

이 안에 e.preventDefault()를 호출하는데, 이유는

이 함수를 호출 안하면 submit 이벤트가 발생할때마다 페이지를 리프레쉬 하게 되므로

다른 이벤트 핸들러 내부 함수들을 실행할 수 없다.

따라서 submit이벤트의 기본적인 일 중 리프레쉬를 막아주는 역할을 한다.

