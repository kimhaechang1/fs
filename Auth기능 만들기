Authentication

auth route 만들기

어떤 사이트를 들어갔을때 여러가지 페이지가 있을거다.

근데 어떤페이지는 로그인 한 유저만 들어갈수있고, 로그인 안한유저도 들어갈수있는 페이지가 있다.

또한 관리자만 들어갈수있는 페이지가 있다.

특히 글쓰고 지울때 권한이 있는지 체크해야한다.

현재 

Server에서 Token을 생성하고 UserDB에 저장되어있고

client 쿠키에도 Token이 저장되어있다.

auth의 동작과정 예시

예를 들어 A->B 페이지로 갈때

이사람이 B페이지로 갈수있는 사람인지 체크하기 위해서

클라이언트에 있는 쿠키에 담겨져 있는 토큰을 서버에 전달함

이 과정에서 Token을 디코드 하면 USER_ID가 나오는데 이 USER_ID를 가진 Token이 있다면 접근이 된다.


먼저 auth 라우팅을 위해 app.get()로 시작한다.

첫 번째 인자는 어떤 주소로 들어올 것인가에 관한것으로 /api/users/auth로 해주고
두 번째 인자는 미들웨어 auth 모듈을 사용할 것이기 때문에 auth
세 번째 인자는 콜백함수로 (req, res) 를 사용한다.

미들웨어 auth에서는 저번시간에 만들어준 token이 저장되어있는 쿠키(x_auth)를 찾는다.
let token = req.cookies.x_auth

그리고 결국 이 토큰을 복호화 하여 _id와 token을 가지고 

DB상에 해당하는 유저가 존재하는지 찾기 위한 모델 커스텀메서드 findByToken()을 거친다.

당연히 유저 모델 커스텀메서드이기 때문에 User 모듈을 require 해주어야 한다.

const {User} = require('../models/Users')

User.findByToken(token, (err, user){
    
})

위 함수를 스키마가 정의되어 있는 곳에서 정의 한다

userSchema.statics.findByToken = function(token, cb){
    var user = this
    
}

여기서 먼저 jsonWebToken의 내장함수인 verify를 사용한다.

여기서 verify 는 'jwt.verify(복호화 할 값, 키값, 콜백함수(err, decoded))' 의 형태를 가지며

복호화 할 값은 즉 파라미터로 넘어온 토큰이며, 키값은 저번시간에 토큰만들때 쓴 testToken1이 되고

콜백함수는 늘 쓰던 콜백인데 decoded 는 복호화된 값 즉 _id를 뜻한다.

결국 jwt.verify(token, 'testToken1', (err, decoded){

}) 이 되고

여기서 우리는 마지막으로 얻은 _id와 토큰을 가지고 DB에서 해당되는 유저를 찾는다.

user.findOne({
    "_id":decoded,
    "token":token
} (err, cb){
    if(err) cb(err)
    cb(null, user)
})

이렇게 스키마 커스텀 함수가 정상적으로 작동하였다면

미들웨어에서 넘어온 유저정보가 있는지 파악하여 isAuth가 true인지 false인지 판단해야한다.

다시 미들웨어 auth로 넘어와서

만약 콜백을 통해 err를 넘겨받았으면 그대로 err를 넘겨주면 되고

만약 err는 아닌데 user정보가 아예 넘어온것이 없다면 해당하는 유저가 아니므로 isAuth를 false로 하여 리턴하면된다.

만약 user정보가 넘어왔다면 미들웨어에서 다음 종점 함수에서도

user 정보를 사용하기 위해서 req.user = user을 통해 넘겨준다.

(* 미들웨어에서 req 객체 프로퍼티를 추가하면 다음 미들웨어에 전달해 줄수있다.)

그리고 미들웨어이므로 다음 할일을 위해 next()를 호출한다.

let auth = function(req,res,next)=>{
    let token = req.cookies.x_auth
    User.findByToken(token, (err, user){
        if(err) throw err
        if(!user) res.json({ isAuth : false})
        req.token = token
        req.user = user
        next()
    })
})

마지막으로 index.js의 get으로 돌아가면

여기까지 아무문제 없이 실행 되었다는것은 즉 auth가 true라는 것으로

auth가 true라는것은 즉 문제없이 user정보가 넘어온 것 이다.

따라서 res.status(200).json({
    
}) 해주고

내용으로 json 형식을 통해 req 객체 프로퍼티로 넘어온 유저정보를 하나하나 결과값으로 도출해낸다.