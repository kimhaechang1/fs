Redux 세팅하기

redux, react-redux, redux-promis, redux-thunk 다운받기

*redux-middleware

일반적으로 redux의 동작원리는 reactComponent에서 dispatch를 통한 action을 통해 reducer를 호출하는데

이때 reducer가 호출되어 store에 state를 바꾸기 전에 동작하는 것이 middleware이다.

redux-middleware에는 보통 Redux Thunk와 Redux-saga 등이 있다.

보통 상태 data(state)는 DB에 저장되어 있기 때문에 API 통신을 통해 백엔드에서 가져오게 된다.

그렇기에 결국 비동기 통신으로 가져와야 하므로 미들웨어가 쓰이게 된다.

**Redux Thunk

Redux Thunk는 액션 생성자가 리턴하는 것을 객체가 아닌 함수를 사용 할 수 있게 한다.

즉, 기존에 액션 생성자가 리턴하는 객체로는 처리하지 못했던 비동기 작업을 

Redux Thunk를 사용하면서 일반 함수를 리턴할 수 있게 됨으로서 일반함수에서 가능한 모든 동작들이 가능해진다.

이러한 일반함수에서의 동작중에 비동기 통신 작업이 가능해진다.

ex) 
export const login = (dataToSubmit) => async dispatch => {
    const response = await axios.post(`api/users/login`, dataToSubmit)

    dispatch({type:'LOGIN', payload:response})
}

login 액션 생성자가 dispatch가 되어 가지고 온 파라미터로 Post 요청을 보낸 뒤에

서버에서 response 해준 값을 액션으로 다시 reducer 에 호출 되어 전달 해 준다.

여기서 주목 할 점은 response는 Promise 객체이다.

미들웨어를 사용하지 않은 경우라면 그대로 통신을 완료하지 않은 Promise 객체를 payload로 보내겠지만 (비동기 때문에 기다려 주지않음)

async / await에 사용으로 동기적으로 사용할 수 있게 해준다.

즉, post 요청으로 통신 후 서버로부터 response로 promise 객체를 받을 때 까지 기다렸다가 payload에 실어서 reducer에 전달 할 수 있다.

사실 Redux Thunk는 비동기 처리를 위한 미들웨어 보다는 함수를 반환 할 수 있다는 점에 주목해야 하고

비동기 통신에만 집중되는 middleware는 Redux Promise이다.

**Redux Promise

ex)
export const userInfo = (body) =>{
    const request = axios.post('/api/users/userlist',body)
        .then(response => response.data)
    return{
        type : USER_INFO,
        payload: request
    }
}

굳이 async / await을 쓰지 않더라도 통신이 끝난 후 까지 기다렸다가 

응답받은 Promise 객체가 있는 request변수를 reducer 에 payload로 흘려 보낸다.

https://tried.tistory.com/86

다운받는것이 모두 끝났다면

메인페이지인 index.js에서 react-redux의 provider를 import 한다.

redux에서 createStore와 applymiddleware, compose를 import 한다.

그 다음 redux-middleware인 ReduxThunk와 Redux-promise를 import 한다.

여기서 store에서 직접적인 state 변경이 이뤄지기 전에 동작하는것이 미들웨어 라고 한다면

store쪽에 적용이 되어야 할 것이다.

따라서 createStore를 통해 redux-store를 정의 하기 전 적용해야한다.

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION__ || compose

const store = createStore(reducer, composeEnhancers(applyMiddleware(promiseMiddleware, ReduxThunk)))

그리고 chrome의 extension기능 중 하나인 redux DevTool와 연동을 위해 composeEnhancer가 필요하다

https://github.com/reduxjs/redux-devtools/tree/main/extension

마지막으로 store를 정의 한다.

store정의 할 때 applyMiddleware를 통해 redux-thunk 와 redux-promise를 넣어준다.

*compose : 각각의 함수들을 조합한다, 각각의 함수의 반환값은 왼쪽에 있는 함수의 인수로 제공되는 식으로 연속된다.

그리고 해당하는 store를 실제 페이지에 적용하기 위해서는 <Provider/>로 메인페이지인 <App/>을 둘러싸야한다.

그리고 Provider의 속성으로 store가 있는데 이곳에다가 정의한 store를 넣어주면 된다

<Provider
    store={store}
/>

이렇게 되면 정의된 reducer에 의해 action들에 따라 store의 state가 달라질 것이다.

이러한 reducer를 정의 하는 곳은 ./_reducer 에서 하게 될 것이다.

여기에서 index.js를 만들고 reducer를 정의한다.

import { combineReducers } from "redux"
//import user from './user_reducer'

const rootReducer = combineReducers({

})


export default rootReducer

*combineReducers : 
reducer가 많아짐에 따라 리듀싱 함수를 독립적으로 정의 할때
서로다른 리듀싱 함수들을 값으로 가지는 객체를 받아서 createStore에 넘길수 있는 하나의 리듀싱 함수로 바꾸어 준다.


