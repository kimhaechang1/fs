test

client 에서 사용자의 아이디와 비밀번호를 누르면

Server 에서 해당 유저 id와 비밀번호가 존재하는지 데이터베이스에서 체크하고

성공하면 res로서 client에게 전달한다.

따라서 Postman을 대체할 클라이언트 부분을 만들 것 이기 때문에

axios를 통해 전달한다.

테스트용 axios 코드를 적는다

server side

LandingPage.js에서 

axios를 import 하고 React와 useEffect를 import한다.

** 여기서 useEffect?

리액트 컴포넌트의 lifecycle 메서드들

즉, componentDidMount(), componentWillUnmount()와 같은 메서드들을 함수형 컴포넌트에서 사용할 수 있게 하는 함수

import React, {useEffect} from 'react' 를 통해 불러오고

useEffect의 기본 함수 형식은

useEffect(()=>{
    
},[])

여기서 배열부분은 배열안에서 검사하고자 하는 특정 값을 넣거나 빈 배열로 둔다.

하지만 배열을 생략한다면 리렌더링 될 때 마다 실행된다.

즉, mount 되었을때 를 뜻한다.

배열에 특정 값을 준다면 update될 때를 의미한다.

마지막으로 unmount 될때와 update되기 직전에 실행하려면 

cleanup 함수를 반환한다 (return뒤에 나오는 함수)

useEffect(()=>{
    ///...
    return ()=>{
        ///

    }
},[])

만약 unmount 될때로 한다면 빈 배열을 유지하면 되지만

특정 값이 업데이트 되기 직전에 cleanup함수를 실행하려면 배열에 특정 값을 넣어준다.

이어서

function 내부에서 useEffect와 axios를 사용하고

서버사이드의 /api/hello 에 axios.get 메서드를 통해 req를 보낸다.

useEffect(()=>{
    axios.get('/api/hello')
    //
})

그리고 서버사이드에서는 해당하는 라우트로 get 요청을 받아 클라이언트에게
다시 "안녕하세요" 라는 res를 보낸다.

server 폴더 내부 index.js에서

app.get('/api/hello',(req,res)=>{
    res.send("안녕하세요")
})

마지막으로 다시 client사이드에 LandingPage.js로 돌아와 useEffect()내부를 정리해야한다.

서버에서 res를 받고나면 콘솔에 그 받은 데이터를 출력한다.

useEffect(()=>{
    axios.get('/api/hello')
    .then(response => console.log(response.date))
})
