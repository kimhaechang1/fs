client 에서 사용자의 아이디와 비밀번호를 누르면

Server 에서 해당 유저 id와 비밀번호가 존재하는지 데이터베이스에서 체크하고

성공하면 res로서 client에게 전달한다.

따라서 Postman을 대체할 클라이언트 부분을 만들 것 이기 때문에

axios를 통해 전달한다.

테스트용 axios 코드를 적는다

server side

LandingPage.js에서 

axios를 import 하고 React와 useEffect를 import한다.

** 여기서 useEffect?

리액트 컴포넌트의 lifecycle 메서드들

즉, componentDidMount(), componentWillUnmount()와 같은 메서드들을 함수형 컴포넌트에서 사용할 수 있게 하는 함수

import React, {useEffect} from 'react' 를 통해 불러오고

useEffect의 기본 함수 형식은

useEffect(()=>{
    
},[])

여기서 배열부분은 배열안에서 검사하고자 하는 특정 값을 넣거나 빈 배열로 둔다.

하지만 배열을 생략한다면 리렌더링 될 때 마다 실행된다.

즉, mount 되었을때 를 뜻한다.

배열에 특정 값을 준다면 update될 때를 의미한다.

마지막으로 unmount 될때와 update되기 직전에 실행하려면 

cleanup 함수를 반환한다 (return뒤에 나오는 함수)

useEffect(()=>{
    ///...
    return ()=>{
        ///

    }
},[])

만약 unmount 될때로 한다면 빈 배열을 유지하면 되지만

특정 값이 업데이트 되기 직전에 cleanup함수를 실행하려면 배열에 특정 값을 넣어준다.

이어서

function 내부에서 useEffect와 axios를 사용하고

서버사이드의 /api/hello 에 axios.get 메서드를 통해 req를 보낸다.

useEffect(()=>{
    axios.get('/api/hello')
    //
})

그리고 서버사이드에서는 해당하는 라우트로 get 요청을 받아 클라이언트에게
다시 "안녕하세요" 라는 res를 보낸다.

server 폴더 내부 index.js에서

app.get('/api/hello',(req,res)=>{
    res.send("안녕하세요")
})

마지막으로 다시 client사이드에 LandingPage.js로 돌아와 useEffect()내부를 정리해야한다.

서버에서 res를 받고나면 콘솔에 그 받은 데이터를 출력한다.

useEffect(()=>{
    axios.get('/api/hello')
    .then(response => console.log(response.date))
})

여기서 우리가 생각해볼것이 있다. 

서버는 5000번 포트고 클라이언트는 3000번 포트인데

클라이언트에서 아무리 get 요청을 보내 봤자 아무런 소용이 없다.

심지어 axios의 get 요청 방향을 http://localhost:5000/api/hello를 하더라도 반응이 없다.

이 문제는 알고보니 proxy 설정을 안해줬기 때문이었다.

이렇게 두개의 다른 포트를 가지고 있는 서버는 아무 설정없이 Req를 보낼 수 없다.

Cors 정책 때문에
Cross-Origin Resource Sharing (CORS)

아무런 웹 사이트에서 우리서버에 req를 보내면 안되기 때문(보안)

proxy를 사용하여 해결

https://create-react-app.dev/docs/proxying-api-requests-in-development/#configuring-the-proxy-manually

위 문서를 참고하였음 (reqct 사용자의 경우 Configuring the Proxy Manually로 넘어가서 따라하면 문제없음)

문제발생

프록시를 설치하자마자 기본적인 라우팅 기능(react-route-dom)이 수행안되서

혹시 프록시 설정값에 문제가 발생했나?

프록시 설정 해둔것을 모두 코멘트 처리

그래도 라우팅 기능이 돌아오질 않음

혹시 프록시 모듈자체에 문제가 있나?

proxy 모듈(setupProxy.js) 및 http-proxy-middleware를 삭제함

그렇게 하니 라우팅 기능 돌아옴 

다시 proxy 설정에 임함

서버와 클라이언트를 모두 키고 실행 한 결과 서버측의 res가 도착 한 것을 확인

