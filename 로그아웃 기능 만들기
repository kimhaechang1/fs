로그아웃 기능 만들기

로그아웃 라우트를 만들고 

로그아웃 하려는 유저를 데이터 베이스에서 찾아서 그 유저의 토큰을 지워 준다.

먼저 로그아웃 라우트는

index.js에서 app.get() 미들웨어로 처리한다

여기서 중요한점은 미들웨어로 auth를 사용한다는 것이다.

auth를 사용함으로서 로그아웃 할 클라이언트를 인증 처리 한후 해당 유저의 데이터를 받을 수 있다.

(* req 객체 프로퍼티로 넘어온 user 데이터 이다.)

app.get('/api/users/logout',auth, (req,res)=>{
    
})

그 내부에서는 로그아웃 하려는 유저를 데이터베이스에서 찾아 토큰을 지워야하므로

모델 내장함수 중 찾아서 업데이트 하는 findOneAndUpdate()메서드를 사용한다.

User.findOneAndUpdate({
    "_id": req.user._id
},{"token": ""}, (err, user)=>{
    if(err) res.json({ success:false, err })
    res.status(200).send({
        success:true
    })
})



프론트 부분에서 로그아웃 기능 구현

로그인이 된 계정을 전제로 

위의 내용과 같이 클라이언트의 쿠키에서 정보를 가져와 auth미들웨어를 통해 auth 인증이 완료된 후

 User.findOneAndUpdate를 통해 user의 id정보를 갖고 데이터베이스 상의 해당 유저의 token을 지워 버리는 function을 구현하였다.

 또한 로그인 기능의 프론트 기능중에 로그인이 되면 랜딩페이지로 자동으로 넘어가도록 하였다(import {useNavigate} from "react-router-dom")

 따라서 렌딩페이지에서 로그아웃 버튼을 만들고, 해당하는 로그아웃 버튼에 대한 onClick 이벤트 처리를 통해 백엔드 쪽 /api/users/logout api 가 작동하도록한다.

 또한 리다이렉션 위치를 로그인으로 한다.

 ...
 import {axios} from 'axios'
 import {useNavigate} from 'react-router-dom'
 function LandingPage(props){
     ...
     const navigate = useNavigate()
     const onClickHandler = (e) =>{
         axios.get('/api/users/logout')
         .then(res => {
             if(res.data.success){
                 navigate("/login")
             }else{
                 alert("로그아웃에 실패 했습니다.")
             }
         })
     }
     ...
     return (
         <div
         style={{... 
            flexDirection:"column"}}>
            <h2>랜딩 페이지</h2>
            <button onClick={onClickHandler}>로그아웃</button>
         </div>
     )
     
 }

