React JS

2013년도에 페이스북에 의해 만들어진 라이브러리다
프레임웤이 아니다

컴포넌트로 이루어져 있어 모듈과 비슷하게 재사용성이 뛰어나다

RealDOM vs Virtual DOM

ex)
RealDOM에서는 
만약 10개의 리스트가 있는데 여기서 그 중에 한가지의 리스트만 업데이트 되어도
전체를 리로드 해야한다.

하지만 가상돔을 사용한다면

똑같은 상황에서 변경된 노드만 실제돔에서 교체 한다.

어떻게 그것이 가능할까?

JSX을 렌더링 한다 -> Virtual DOM이 업데이트 됨

여기서 이전 Virtual DOM의 상황을 찍어둔 snapshot과 비교하여 바뀐 부분을 찾느다.

이렇게 바뀐 부분을 찾는 과정을 diffing 이라고 한다.

결국 이 바뀐부분만을 RealDOM에서 바꿔준다.

Create React App으로 리액트 시작하기

원래 리액트 앱을 처음 실행 하기 위해선 webpack이나 babel 같은 것을 설정하기위해서
엄청 나게 많은 시간이 걸렸다.

하지만 이제는 create-react-app Command로 바로 시작할 수 있다.

Babel (jsx)
최신 자바스크립트 문법을 지원하지 않은 브라우저들을 위해서 최신 자바스크립트 문법을 구형 브라우저에서도 돌 수 있게 변환시켜줌

* 문득 궁금해진 module.exports VS export default

import, export는 ES6에서 공식 채택된 모듈화 방식임

default는 기본값으로 내보낼 함수, 객체 등 이며, 받아올 때(import) 사용자가 원하는 대로 이름을 지정가능

Node.js와 이전의 브라우저에서는 commonJS 기반의 require 키워드를 통해 모듈화 시킨다.

따라서 module 객체에 담아서 내보낸다고 생각하면 편하다.

React Component

Class Component && Functional Component

Class Component :

export default class Hello extends React.Component{
    render(){
        return(
            <div>
            Hello World
            </div>
        )
    }
}

더 많은 기능들을 사용 할 수 있지만, 코드가 더 길어지며 복잡해지고 성능면에서 느리다.

Functional Component :

export default function Hello(){
    return(
        <div>
            Hello World
        </div>
    )
}

적은 기능을 제공하지만 더 짧고 간단한 코드로 작성하며 더욱 빠른 성능을 나타낸다.

그럼 클래스 컴포넌트의 장점인 더 많은 기능은 어떤걸 말하는걸까?

바로 리액트 라이프사이클 함수에 있다.

*리액트 라이프사이클 함수

컴포넌트의 생명주기이며 리액트의 컴포넌트의 마운팅 단계, 업데이트 단계, 언마운팅 단계인 세가지로 나뉜다.

마운팅단계에서는 constructor를 거쳐 각종 필요한 context와 기본 속성값들 그리고 state를 가져오는데 이것이 getDerivedStateFromProps 가된다.

그 다음 마운트를 할 준비가 되었다는 함수를 호출하는데 이것이 componentWillMount()이다.

그리고 마운트를 완료 한 후 componentDidMount()를 호출한다.

업데이트 단계에서는 componentWillReceiveProps가 호출되어 속성값들을 받아오고

그 다음 shouldComponentUpdate()를 호출하여 진짜 업데이트 할 것인지 boolean을 통해 결정하고 성능 최적화를 한다

그 다음 componentWillUpdate()를 호출하여 업데이트 직전에 처리할 것들을 해결하고

업데이트가 반영 된 후 componentDidUpdate()를 호출한다.

마지막으로 언마운팅 단계에서는 componentWillUnmount()를 호출한다.

리액트 컴포넌트를 언마운트 하는 이유는 리액트 컴포넌트를 제거하더라도 이벤트 리스너가 함께 제거되진 않기 때문이다.

즉 마운팅 단계에서는

constructor -> getDerivedStateFromProps -> componentWillMount() -> componentDidMount()

업데이트 단계에서는

componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> componentDidUpdate()

언 마운팅 단계에서는

componentWillUnmount()

그렇게 클래스 컴포넌트를 어쩔수 없이 사용하다가 

16.8버전에서 React Hook이라는 것이 업데이트 되어서 

Functional component에서도 라이프사이클 이벤트를 처리할 수 있게 되었다.

Class Component :

export default class Hello extends React.Component{
    constructor(props){
        super(props)
        this.state = {
            name: ""
        }
    }
    componentDidMount(){
        Axios.get('/api/user/name')
        .then(res=>{
            this.setState({ name: res.data.name})
        })
    }
    render(){
        return(
            <div>
                My name is {this.state.name}
            </div>
        )
    }
}

Functional Component :

export default function Hello(){
    const [Name, setName] = useState("")
    useEffect(()=>{
        Axios.get('/api/user/name')
        .then(res =>{
            setName(res.data.name)
        })
    }, [])
    return(
        <div>
            My name is {name}
        </div>
    )
}