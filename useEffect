* useEffect

함수형 컴포넌트에서 side effect를 수행할 수 있도록 해준다.

여기서 side effect란 예를들어 데이터 가져오기, 구독 설정하기, 수동으로 React 컴포넌트의 DOM을 수정하는 것까지 side effects라고 할 수 있다.

*과거에 React 클래스 컴포넌트에서 생명주기 메서드와 익숙하다면

useEffect Hook을 componentDidMount와 componentDidUpdate, componentWillUnmount가 합쳐진 것으로 생각해도 좋다.

일반적으로 React 컴포넌트에는 두 종류의 side effect가 있다.

clean-up이 필요한 것과 그렇지 않은것으로 구분된다.

Clean-up을 사용하지 않는 Effects

우리는 React를 사용할 때 DOM을 업데이트 한 후 추가로 코드를 실행해야 할 때가 있다.

ex) request, DOM 객체에 직접접근, 로깅

이러한 것들은 clean-up이 필요없는 경우 즉, 실행 이후 신경 쓸 것이 없다.

useEffect를 통해 클릭 카운팅을 하는 컴포넌트 예시를 보자.

import React, {useEffect} from 'react'

function Example(){
    const [count, setCount] = useState(0)

    useEffect()=>{
        document.title = `You clicked ${count} times`
    }
    return (
        <div>
            <p>You clicked {count} times</p>
            <button onClick={()=>setCount(count+1)}>Click Me</button>
        </div>
    )
}

useEffect가 하는일?

여기서 useEffect는 react가 DOM을 업데이트 한 이후 무엇을 실행 할 것인지를 정해준다.

위의 함수에서는 DOM객체에 접근하여 title부분을 교체하는 것 이지만

실제로는 데이터를 가져오거나 명령형 API를 불러내는 일도 가능하다.

useEffect는 왜 컴포넌트 안에 있어야 하나?

useEffect를 컴포넌트 내부에 둠으로서 effect를 통해 count state 변수 또는 그 어떤 prop에도 접근이 가능해 진다.

즉 함수 범위안에 존재하기 때문에 특별한 API 없이도 값을 얻을 수 있다.

useEffect는 렌더링 이후에 매번 수행?

결론적으로 말하면 첫 번째 렌더링과 이후의 모든 업데이트에서 수행된다.

즉 React에서 effect가 수행되는 시점은 이미 DOM객체가 업데이트 된 이후라고 생각하면 된다.

Clean-up을 이용하는 Effects

외부 데이터에 구독을 설정해야 하는 경우과 같은 상황일 때 

메모리 누수가 발생하지 않도록 정리 하는것이 매우 중요하다.

다음은 친구가 온라인인지 아닌지를 나타내는 컴포넌트 예시이다.

import React, { useState, useEffect } from 'react';

function FriendStatus(props) {
  const [isOnline, setIsOnline] = useState(null);

  useEffect(() => {
    function handleStatusChange(status) {
      setIsOnline(status.isOnline);
    }
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
    // effect 이후에 어떻게 정리(clean-up)할 것인지 표시합니다.
    return function cleanup() {
      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
    };
  });

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}

effect에서 함수를 반환하는 이유

effect를 위한 추가적인 정리 메커니즘으로 

이를 통해 위의 코드는 구독의 추가와 제거를 하나의 effect로 구성 할 수 있게 된다.

React가 effect를 정리하는 시점

React는 컴포넌트가 마운트 헤제되는 때에 정리를 실행합니다.

하지만 위의 경우에는 랜더링 될 때마다 실행 될 것이다.

이렇게 매번 반복해서 실행하지 않으면 버그가 발생 할 수도 있다.

왜 반복해서 실행하지 않으면 버그가 발생하는가?

위의 코드를 클래스 컴포넌트에서 우리는 

comonentDidMount(){
    ChatAPI.subscribeToFriendStatus(
        this.props.friend.id,
        this.handleStatusChange
    )
}

를 통해 렌더링 이후 속성에서 친구의 id를 들고와 상태값을 바꾸어 주고(구독)

componentWillUnmount(){
    ChatAPI.unsubscribeFromFriendStatus(
        this.props.friend.id,
        this.handleStatusChange
    )
}

마운트가 해제 되기 전에 id를 다시한번 들고와 상태값을 바꾸어준다.(해제)

하지만 여기서 랜더링 되어있는 동안 friend의 속성이 변한다면 

다른 친구의 온라인 상태를 표시하고 마운트를 해제 할 때, 다른 친구의 id를 사용하게 된다.

따라서 클래스 컴포넌트에서는 componentDidUpdate(prevProps)를 통해 이전 friend의 props의 상태값을 바꾸고

새로운 friend의 상태값을 바꾸어줄 수있다.

componentDidUpdate(prevProps){
    ChatAPI.unsubscribFromFriendStatus(
        prevProps.friend.id,
        this.handleStatusChange
    )

    ChatAPI.subscribFromFriendStatus(
        this.props.friend.id,
        this.handleStatusChange
    )
}

그리고 함수형 컴포넌트(Hook을 사용하는 컴포넌트)에서는 기본적으로 렌더링이 될 때 마다 업데이트 되기 때문에

더는 업데이트를 위한 특별한 코드가 필요없다.

다음의 effect를 적용하기 전 단지 이전의 effect를 clean-up 할 뿐이다.

useEffect(() => {
    function handleStatusChange(status) {
      setIsOnline(status.isOnline);
    }
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
    // effect 이후에 어떻게 정리(clean-up)할 것인지 표시합니다.
    return function cleanup() {
      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
    };
  });

Effect를 건너뛰어 성능 최적화 하기

모든 렌더링 이후에 effect를 정리하거나 적용하는 것은 때때로 성능 저하를 발생시킬수도 있다.

클래스 컴포넌트의 경우에는 componentDidUpdate(prevProps, prevState)를 통해 이러한 문제를 해결 하지만

함수형 컴포넌트(Hook을 사용하는 컴포넌트)에서는 useEffect 내부에 내제 되어 있다.

useEffect(()=>{
    document.title=`you clicked ${count} times`
},[count])

여기서 선택적 인수인 두 번째 인수의 배열 속에 매번 감시 할 state나 props를 넣어주면 된다.

위의 친구의 상태를 나타내는 컴포넌트를 기준으로 만들어 본다면 다음과 같다.

useEffect(()=>{
    function handleStatusChange(status){
        setIsOnline(status.isOnline)
    }
    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)
    return () =>{
        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)
    }
},[props.friend.id]) // id가 바뀔때만 재 구독한다.